From 0aaf56981fc7ca5b69d14b5c8507fb1e5fc9797a Mon Sep 17 00:00:00 2001
From: Steven Noonan <steven@uplinklabs.net>
Date: Wed, 11 Dec 2013 00:54:28 -0800
Subject: [PATCH] os.clock: use high resolution, monotonic clock sources where
 possible

Signed-off-by: Steven Noonan <steven@uplinklabs.net>
---
 src/lib_os.c | 40 +++++++++++++++++++++++++++++++++++++++-
 1 file changed, 39 insertions(+), 1 deletion(-)

diff --git a/src/lib_os.c b/src/lib_os.c
index 0a78412..d59cb96 100644
--- a/src/lib_os.c
+++ b/src/lib_os.c
@@ -27,6 +27,12 @@
 #include <stdio.h>
 #endif
 
+#if LJ_TARGET_WINDOWS
+#include <windows.h>
+#elif LJ_TARGET_OSX
+#include <mach/mach_time.h>
+#endif
+
 /* ------------------------------------------------------------------------ */
 
 #define LJLIB_MODULE_os
@@ -116,9 +122,41 @@ LJLIB_CF(os_exit)
   return 0;  /* Unreachable. */
 }
 
+#if LJ_TARGET_WINDOWS
+static lua_Number clock_read_time(void)
+{
+  static LARGE_INTEGER frequency;
+  LARGE_INTEGER counter;
+  if (!frequency.QuadPart)
+    QueryPerformanceFrequency(&frequency);
+  QueryPerformanceCounter(&counter);
+  return (lua_Number)counter.QuadPart / (lua_Number)frequency.QuadPart;
+}
+#elif LJ_TARGET_OSX
+static lua_Number clock_read_time(void)
+{
+  static mach_timebase_info_data_t timebase;
+  if (timebase.denom == 0)
+	  mach_timebase_info(&timebase);
+  return (lua_Number)mach_absolute_time() * (lua_Number)timebase.numer / (lua_Number)timebase.denom * (lua_Number)1e-9f;
+}
+#elif LJ_TARGET_LINUX
+static lua_Number clock_read_time(void)
+{
+  struct timespec ts;
+  clock_gettime(CLOCK_REALTIME, &ts);
+  return (lua_Number)ts.tv_sec + (lua_Number)ts.tv_nsec * (lua_Number)1e-9f;
+}
+#else
+static lua_Number clock_read_time(void)
+{
+  return (lua_Number)clock() * (1.0 / (lua_Number)CLOCKS_PER_SEC);
+}
+#endif
+
 LJLIB_CF(os_clock)
 {
-  setnumV(L->top++, ((lua_Number)clock())*(1.0/(lua_Number)CLOCKS_PER_SEC));
+  setnumV(L->top++, clock_read_time());
   return 1;
 }
 
-- 
1.8.4.3

